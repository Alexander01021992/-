"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –æ–¥–Ω–æ–º—É —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Replicate API
PixelPie AI - –§–æ—Ç–æ –ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏–µ

–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏:
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ 'HTTP 404 - Not found' –≤ download_image:
  - –£–¥–∞–ª–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint /v1/files/{id}/content.
  - –î–æ–±–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ replicate.Client.files.get –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞.
  - –£–ª—É—á—à–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞.
  - –î–æ–±–∞–≤–ª–µ–Ω fallback —Å –ø–æ–Ω—è—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ.
- –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
  - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ 'urls.get —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏—Å—Ö–æ–¥–Ω—ã–º URL'.
  - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ '–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π Content-Type: application/json'.
  - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ 'cannot identify image file' –≤ generate_image.
  - –ò–∑–º–µ–Ω–µ–Ω Authorization header –Ω–∞ "Token {api_key}" –≤ download_image –∏ upload_image.
    –ü–æ—á–µ–º—É: Replicate API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å "Token", –∞ –Ω–µ "Bearer"; –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç 401 Missing authorization header.
"""

import replicate
import asyncio
import aiohttp
import os
import logging
from typing import Optional, Dict, Any, Union, List
from datetime import datetime
from PIL import Image
import io
import magic  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ mime-—Ç–∏–ø–∞ —Ñ–∞–π–ª–∞

logger = logging.getLogger(__name__)

async def upload_image_to_replicate(image_bytes: bytes, filename: str) -> str:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ Replicate –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ metadata URL
    
    Args:
        image_bytes: –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        
    Returns:
        Metadata URL (data['url'])
        
    Raises:
        Exception: –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å
    """
    try:
        url = "https://api.replicate.com/v1/files"
        headers = {
            "Authorization": f"Token {os.environ['REPLICATE_API_TOKEN']}",
            "Content-Type": "application/octet-stream",
            "X-File-Name": filename
        }
        timeout = aiohttp.ClientTimeout(total=60)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(url, headers=headers, data=image_bytes) as response:
                if response.status == 201:
                    data = await response.json()
                    if 'url' in data:
                        metadata_url = data['url']
                        logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, metadata URL: {metadata_url}")
                        return metadata_url
                    else:
                        raise Exception("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç URL")
                else:
                    error_text = await response.text()
                    raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Replicate: HTTP {response.status} - {error_text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ Replicate: {str(e)}")
        raise

async def download_image(api_key: str, url: str, client: replicate.Client) -> bytes:
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ metadata URL —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º replicate.Client
    
    Args:
        api_key: API –∫–ª—é—á –¥–ª—è Replicate
        url: Metadata URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (/v1/files/{id})
        client: –≠–∫–∑–µ–º–ø–ª—è—Ä replicate.Client –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        
    Returns:
        –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
    Raises:
        Exception: –ï—Å–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    """
    try:
        # –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è urls.get
        headers = {
            "Authorization": f"Token {api_key}",
            "Accept": "application/json"
        }
        timeout = aiohttp.ClientTimeout(total=60)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    content_type = response.headers.get('Content-Type', '')
                    if not content_type.startswith('application/json'):
                        raise Exception(f"–û–∂–∏–¥–∞–ª—Å—è JSON –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω Content-Type: {content_type}")
                    
                    metadata = await response.json()
                    logger.debug(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {metadata}")
                    
                    if 'id' not in metadata:
                        raise Exception("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç id —Ñ–∞–π–ª–∞")
                    
                    file_id = metadata['id']
                    logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω file_id: {file_id}")
                else:
                    error_text = await response.text()
                    raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: HTTP {response.status} - {error_text}")
        
        # –®–∞–≥ 2: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ replicate.Client
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å id {file_id} —á–µ—Ä–µ–∑ replicate.Client")
        file_content = await asyncio.to_thread(client.files.get, file_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–∏–Ω–∞—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if not isinstance(file_content, bytes):
            raise Exception(f"replicate.Client.files.get –≤–µ—Ä–Ω—É–ª –Ω–µ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: —Ç–∏–ø {type(file_content)}")
        
        logger.debug(f"–ü–µ—Ä–≤—ã–µ 10 –±–∞–π—Ç —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {file_content[:10]}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        mime = magic.Magic(mime=True)
        file_type = mime.from_buffer(file_content)
        if not file_type.startswith('image/'):
            raise Exception(f"–°–∫–∞—á–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: MIME-—Ç–∏–ø {file_type}")
        
        return file_content
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        raise

class PhotoTransformGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –æ–¥–Ω–æ–º—É —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Replicate"""
    
    def __init__(self, replicate_api_key: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            replicate_api_key: API –∫–ª—é—á –¥–ª—è Replicate
        """
        self.api_key = replicate_api_key
        os.environ["REPLICATE_API_TOKEN"] = replicate_api_key
        
        # –°—Ç–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –¥–ª—è runwayml/gen4-image
        self.styles = {
            "photoshop": {
                "name": "ü§ç –§–æ—Ç–æ—à–æ–ø",
                "description": "–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π",
                "prompt_template": "Professional portrait photo of @person, enhanced quality, flawless high-definition smooth beautiful skin, perfect even skin tone, flawless complexion, razor-sharp focus on eyes, detailed ultra-realistic eyes, clean background, natural colors, perfect lighting, photorealistic, ultra-high resolution, 16K, masterpiece, best quality, hyper-detailed, no artifacts, sharp details everywhere, crystal-clear sharpness, flawless 32K resolution",
                "model": "runwayml/gen4-image",
                "model_type": "gen4",
                "aspect_ratio": "3:4"
            },
            "art": {
                "name": "üé® AI Art",
                "description": "–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –≤ –∞–≤—Ç–æ—Ä—Å–∫–æ–º —Å—Ç–∏–ª–µ",
                "prompt_template": "Digital art illustration of @person, artistic style, flawless high-definition smooth beautiful skin, perfect even skin tone, flawless complexion, razor-sharp focus on eyes, detailed ultra-realistic eyes, pastel colors, creative portrait, Pinterest aesthetic, beautiful lighting, stylized, ultra-high resolution, 16K, masterpiece, best quality, hyper-detailed, no artifacts, sharp details everywhere, crystal-clear sharpness, flawless 32K resolution",
                "model": "runwayml/gen4-image",
                "model_type": "gen4",
                "aspect_ratio": "3:4"
            },
            "cinema": {
                "name": "üé¨ –ö–∏–Ω–æ",
                "description": "–ö–∞–¥—Ä –∏–∑ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞",
                "prompt_template": "Cinematic portrait of @person, movie scene, flawless high-definition smooth beautiful skin, perfect even skin tone, flawless complexion, razor-sharp focus on eyes, detailed ultra-realistic eyes, dramatic lighting, film grain, atmospheric colors, professional cinematography, ultra-high resolution, 16K, masterpiece, best quality, hyper-detailed, no artifacts, sharp details everywhere, crystal-clear sharpness, flawless 32K resolution",
                "model": "runwayml/gen4-image",
                "model_type": "gen4",
                "aspect_ratio": "3:4"
            },
            "portrait": {
                "name": "üß† –ü–æ—Ä—Ç—Ä–µ—Ç",
                "description": "–ì–ª—É–±–æ–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–∑",
                "prompt_template": "Deep psychological portrait of @person, soft shadows, face focus, flawless high-definition smooth beautiful skin, perfect even skin tone, flawless complexion, razor-sharp focus on eyes, detailed ultra-realistic eyes, character photography, soulful expression, professional photographer style, ultra-high resolution, 16K, masterpiece, best quality, hyper-detailed, no artifacts, sharp details everywhere, crystal-clear sharpness, flawless 32K resolution",
                "model": "runwayml/gen4-image",
                "model_type": "gen4",
                "aspect_ratio": "3:4"
            },
            "fantasy": {
                "name": "‚ö° –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
                "description": "–ù–µ–æ–Ω, sci-fi, –≤–∏–∑—É–∞–ª—å–Ω—ã–π –¥—Ä–∞–π–≤",
                "prompt_template": "Cyberpunk portrait of @person, neon lights, sci-fi style, flawless high-definition smooth beautiful skin, perfect even skin tone, flawless complexion, razor-sharp focus on eyes, detailed ultra-realistic eyes, futuristic, glitch effects, dramatic lighting, cosmic atmosphere, ultra-high resolution, 16K, masterpiece, best quality, hyper-detailed, no artifacts, sharp details everywhere, crystal-clear sharpness, flawless 32K resolution",
                "model": "runwayml/gen4-image",
                "model_type": "gen4",
                "aspect_ratio": "3:4"
            },
            "lego": {
                "name": "üß± LEGO",
                "description": "–ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –≤ LEGO –º–∏–Ω–∏—Ñ–∏–≥—É—Ä–∫—É",
                "prompt_template": "A hyper-detailed LEGO minifigure of @person, ultra-realistic LEGO style, razor-sharp focus on eyes, detailed eyes, 4K resolution, vibrant colors, precise blocky textures, LEGO hair with stud details, glossy LEGO pieces, visible brick seams, LEGO cityscape background, cinematic lighting, plastic sheen, blocky toy-like nature, perfect LEGO brick alignment, stud patterns, reflective plastic surfaces, ultra-high resolution, 16K, masterpiece, best quality, no artifacts, sharp details everywhere, crystal-clear sharpness, flawless 32K resolution",
                "model": "runwayml/gen4-image",
                "model_type": "gen4",
                "aspect_ratio": "3:4"
            }
        }
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
        self.aspect_ratios = {
            "9:16": "9:16",
            "4:3": "4:3",
            "3:4": "3:4",
            "1:1": "1:1",
            "16:9": "16:9"
        }
        
        # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã—Ö aspect_ratio
        self.aspect_ratio_map = {
            "9": "9:16",
            "16": "16:9",
            "4": "4:3",
            "3": "3:4",
            "1": "1:1"
        }
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ 720p)
        self.resolutions = {
            "720p": "720p"
        }
        
        # –ö–ª–∏–µ–Ω—Ç Replicate
        self.client = replicate.Client(api_token=replicate_api_key)
    
    async def generate_image(self, image_url: str, style: str, user_id: int, aspect_ratio: str = "3:4", resolution: str = "720p") -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π aspect_ratio (resolution —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ 720p)
        
        Args:
            image_url: metadata URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (/v1/files/{id})
            style: –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            aspect_ratio: –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
            resolution: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ "720p")
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info(f"–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å—Ç–∏–ª–µ {style}, aspect_ratio={aspect_ratio}, resolution={resolution}")
            
            if style not in self.styles:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å: {style}")
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è aspect_ratio –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            if aspect_ratio in self.aspect_ratio_map:
                aspect_ratio = self.aspect_ratio_map[aspect_ratio]
                logger.info(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–ª–∏ aspect_ratio –∫ {aspect_ratio}")
            
            if aspect_ratio not in self.aspect_ratios:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {aspect_ratio}")
            
            if resolution not in self.resolutions:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {resolution}")
            
            style_config = self.styles[style]
            
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JPG
            logger.info(f"–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JPG")
            image_bytes = await download_image(self.api_key, image_url, self.client)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ PIL
            try:
                img = Image.open(io.BytesIO(image_bytes))
            except Exception as pil_err:
                raise ValueError(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(pil_err)}")
            
            buffer = io.BytesIO()
            img.convert('RGB').save(buffer, format="JPEG", quality=95)
            buffer.seek(0)
            processed_image_bytes = buffer.read()
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ Replicate
            processed_url = await upload_image_to_replicate(processed_image_bytes, "processed.jpg")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ–¥–µ–ª–∏ runwayml/gen4-image
            input_params = {
                "prompt": style_config['prompt_template'],
                "aspect_ratio": aspect_ratio,
                "reference_tags": ["person"],
                "reference_images": [processed_url],
                "output_resolution": resolution
            }
            
            # –°–æ–∑–¥–∞–µ–º prediction —á–µ—Ä–µ–∑ API
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ prediction –¥–ª—è –º–æ–¥–µ–ª–∏ {style_config['model']}")
            
            prediction = await asyncio.to_thread(
                self.client.predictions.create,
                model=style_config['model'],
                input=input_params
            )
            
            logger.info(f"Prediction —Å–æ–∑–¥–∞–Ω: {prediction.id}")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            while prediction.status not in ["succeeded", "failed", "canceled"]:
                await asyncio.sleep(2)
                prediction = await asyncio.to_thread(
                    self.client.predictions.get,
                    prediction.id
                )
                logger.info(f"–°—Ç–∞—Ç—É—Å: {prediction.status}")
            
            if prediction.status == "succeeded":
                output_url = prediction.output
                logger.info(f"–¢–∏–ø output: {type(output_url)}")
                logger.info(f"Output –∑–Ω–∞—á–µ–Ω–∏–µ: {output_url}")
                
                if isinstance(output_url, str):
                    result_url = output_url
                else:
                    result_url = str(output_url)
                    logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª–∏ {type(output_url)} –≤ —Å—Ç—Ä–æ–∫—É: {result_url}")
                
                logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, URL: {result_url}")
                
                return {
                    "success": True,
                    "result_url": result_url,
                    "style": style,
                    "style_name": style_config['name'],
                    "timestamp": datetime.now().isoformat(),
                    "prediction_id": prediction.id
                }
            else:
                error_msg = f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {prediction.status}"
                if hasattr(prediction, 'error') and prediction.error:
                    error_msg += f" - {prediction.error}"
                
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_msg}")
                
                return {
                    "success": False,
                    "error": error_msg,
                    "style": style,
                    "timestamp": datetime.now().isoformat()
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "style": style,
                "timestamp": datetime.now().isoformat()
            }
    
    def get_style_keyboard(self) -> List[List[Dict[str, str]]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å—Ç–∏–ª—è–º–∏ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è InlineKeyboardMarkup
        """
        keyboard = []
        row = []
        for style_key, style_info in self.styles.items():
            button_data = {
                "text": style_info["name"],
                "callback_data": f"transform_style:{style_key}"
            }
            row.append(button_data)
            if len(row) == 2:
                keyboard.append(row)
                row = []
        
        if row:
            keyboard.append(row)
        
        keyboard.append([{"text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "callback_data": "transform_cancel"}])
        return keyboard
    
    def get_style_info(self, style: str) -> Optional[Dict[str, str]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∏–ª–µ
        
        Args:
            style: –ö–ª—é—á —Å—Ç–∏–ª—è
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∏–ª–µ –∏–ª–∏ None
        """
        return self.styles.get(style)
    
    def get_style_description(self, style: str) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∏–ª—è
        
        Args:
            style: –ö–ª—é—á —Å—Ç–∏–ª—è
            
        Returns:
            –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è
        """
        descriptions = {
            "photoshop": """ü§ç –§–æ—Ç–æ—à–æ–ø / –£–ª—É—á—à–µ–Ω–∏–µ

–¢—ã ‚Äî –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –≤ –∏–¥–µ–∞–ª—å–Ω–æ–º —Å–≤–µ—Ç–µ.
–§–æ–Ω –≤—ã—á–∏—â–µ–Ω, –∫–æ–∂–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Å–≤–µ–∂–æ, —Ü–≤–µ—Ç–∞ ‚Äî –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ.
–ö–∞–∫ –±—É–¥—Ç–æ —Ç–≤–æ–µ —Ñ–æ—Ç–æ —Ä–µ—Ç—É—à–∏—Ä–æ–≤–∞–ª –ø—Ä–æ—Ñ–∏. –ë–µ–∑ –ª–∏—à–Ω–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.

üìå –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è: –∞–≤–∞—Ç–∞—Ä–∫–∏, —Ä–µ–∑—é–º–µ, –ø—Ä–æ—Ñ–∏–ª—è.
‚ö° PixelPie AI —É–ª—É—á—à–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏""",
            "art": """üé® AI Art / –ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è

–§–æ—Ç–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∞—Ä—Ç.
–õ–∏–Ω–∏–∏, —Å–≤–µ—Ç, –ø–∞—Å—Ç–µ–ª—å –∏–ª–∏ —Å—Ç–∏–ª—å digital-–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π ‚Äî –∏ —Ç—ã –≤—ã–≥–ª—è–¥–∏—à—å –∫–∞–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∫–Ω–∏–≥–∏ –∏–ª–∏ Pinterest-–ø–æ—Å—Ç–µ—Ä–∞.

üìå –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è: —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞, —Å—Ç–æ—Ä–∏—Å, —ç—Å—Ç–µ—Ç–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
üé® PixelPie AI —Å–æ–∑–¥–∞—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é""",
            "cinema": """üé¨ –ö–∏–Ω–æ / Cinematic

–¢—ã –≤ –∫–∞–¥—Ä–µ ‚Äî –±—É–¥—Ç–æ —ç—Ç–æ —Å—Ü–µ–Ω–∞ –∏–∑ —Ñ–∏–ª—å–º–∞.
–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ —Ü–≤–µ—Ç–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–≤–µ—Ç –∏ –Ω–µ–º–Ω–æ–≥–æ –¥—Ä–∞–º—ã.

üìå –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è: —è—Ä–∫–∏—Ö –æ–±—Ä–∞–∑–æ–≤, –≤–∞—É-—ç—Ñ—Ñ–µ–∫—Ç–∞, –ø–æ—Å—Ç–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º.
üé• PixelPie AI –ø—Ä–∏–º–µ–Ω–∏—Ç –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É""",
            "portrait": """üß† –ü–æ—Ä—Ç—Ä–µ—Ç / –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π

–ì–ª—É–±–æ–∫–∏–π –≤–∑–≥–ª—è–¥, –º—è–≥–∫–∏–µ —Ç–µ–Ω–∏, —Ñ–æ–∫—É—Å –Ω–∞ –ª–∏—Ü–µ.
–≠—Ñ—Ñ–µ–∫—Ç, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã —Å–Ω—è—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–º, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä.

üìå –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è: —Å–ø–æ–∫–æ–π–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π, –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –¥—É—à–æ–π.
üì∏ PixelPie AI —Å–æ–∑–¥–∞—Å—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç""",
            "fantasy": """‚ö° –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ / Neon-Cyber

–¢—ã –≤ –¥—Ä—É–≥–æ–º –≤—Ä–µ–º–µ–Ω–∏, –≤ –¥—Ä—É–≥–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π.
–ì–ª–∏—Ç—á–∏, –Ω–µ–æ–Ω, –¥—Ä–∞–º–∞—Ç–∏—á–Ω—ã–π —Å–≤–µ—Ç ‚Äî –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç–∫—à–Ω –ø—Ä—è–º–æ –∏–∑ sci-fi —Ç—Ä–µ–π–ª–µ—Ä–∞.

üìå –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è: –∞–≤–∞—Ç–∞—Ä–æ–∫, —Å—Ç–æ—Ä–∏—Å, —è—Ä–∫–∏—Ö –ø–æ—Å—Ç–æ–≤.
üöÄ PixelPie AI –ø–µ—Ä–µ–Ω–µ—Å–µ—Ç —Ç–µ–±—è –≤ –±—É–¥—É—â–µ–µ""",
            "lego": """üß± LEGO / –ú–∏–Ω–∏—Ñ–∏–≥—É—Ä–∫–∞

–ü—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é LEGO –º–∏–Ω–∏—Ñ–∏–≥—É—Ä–∫—É.
–Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞, –±–ª–æ—á–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã, –∫—É–ª—å—Ç–æ–≤—ã–π —Å—Ç–∏–ª—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞.
–ö–∞–∂–¥–∞—è –¥–µ—Ç–∞–ª—å –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–æ –º–µ–ª—å—á–∞–π—à–∏—Ö –∫—É–±–∏–∫–æ–≤!

üìå –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è: –≤–µ—Å–µ–ª—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫, –ø–æ–¥–∞—Ä–∫–æ–≤, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
üß± PixelPie AI —Å–æ–∑–¥–∞—Å—Ç —Ç–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é LEGO-–≤–µ—Ä—Å–∏—é"""
        }
        return descriptions.get(style, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    
    def get_aspect_ratio_keyboard(self, style_key: str) -> List[List[Dict[str, str]]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
        
        Args:
            style_key: –ö–ª—é—á —Å—Ç–∏–ª—è –¥–ª—è callback_data
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è InlineKeyboardMarkup
        """
        keyboard = []
        row = []
        for ratio_key in self.aspect_ratios:
            button_data = {
                "text": f"{ratio_key}",
                "callback_data": f"transform_ratio:{style_key}:{ratio_key}"
            }
            row.append(button_data)
            if len(row) == 3:
                keyboard.append(row)
                row = []
        
        if row:
            keyboard.append(row)
        
        keyboard.append([{"text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "callback_data": "transform_cancel"}])
        return keyboard
    
    def get_resolution_keyboard(self, style_key: str, aspect_ratio: str) -> List[List[Dict[str, str]]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ 720p)
        
        Args:
            style_key: –ö–ª—é—á —Å—Ç–∏–ª—è
            aspect_ratio: –í—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –¥–ª—è callback_data
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è InlineKeyboardMarkup
        """
        keyboard = []
        row = []
        for res_key in self.resolutions:
            button_data = {
                "text": f"{res_key}",
                "callback_data": f"transform_resolution:{style_key}:{aspect_ratio}:{res_key}"
            }
            row.append(button_data)
        
        if row:
            keyboard.append(row)
        
        keyboard.append([{"text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "callback_data": "transform_cancel"}])
        return keyboard
    
    def get_aspect_ratio_description(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ –≤—ã–±–æ—Ä–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
        
        Returns:
            –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–æ—Ç–∞
        """
        return """
üìê –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!

–≠—Ç–æ –∫–∞–∫ —Ä–∞–º–∫–∞ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω—ã: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
- 9:16: –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è —Å—Ç–æ—Ä–∏—Å –∏ –º–æ–±–∏–ª—å–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤ üì±
- 16:9: –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π, –∫–∞–∫ –≤–∏–¥–µ–æ –Ω–∞ YouTube –∏–ª–∏ –∫–∏–Ω–æ—ç–∫—Ä–∞–Ω üé•
- 1:1: –ö–≤–∞–¥—Ä–∞—Ç, –∫–ª–∞—Å—Å–∏–∫–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–∫ –∏ –ø–æ—Å—Ç–æ–≤ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö üî≤
- 3:4 / 4:3: –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π –∏–ª–∏ –∞–ª—å–±–æ–º–Ω—ã–π, —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–ª—è —Ñ–æ—Ç–æ üì∏

PixelPie AI –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞! ‚ú®
"""